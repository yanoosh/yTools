<?php

namespace yTools;

/**
 * Test class for CronExpression.
 * Generated by PHPUnit on 2011-07-21 at 19:21:18.
 */
class CronExpressionTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var string[]
     */
    protected $expressions = array(
        0 => '* * * * *',
        1 => '0-59 0-23 1-31 1-12 0-6',
        2 => '0-70 0-70 0-70 0-70 0-70',
        3 => '*/2 * * * *',
        4 => '*/3 * * * *',
        5 => '*/3 * */5 * sun',
        6 => '10-15 6-9 * * *',
        7 => '13,16,19,22 12,17,22 * * *',
        8 => '1-10,30-40 */5,*/3 * 7 *',
        9 => '10-30/3 0-11/2 * * */2',
        10 => '10-30/3 0-11/2 * * sun,tue,thu,sat',
        11 => '0 0 1-15/3 3-11/2 *',
        12 => '0 0 1-15/3 mar,may,jul,sep,nov *',
    );
    /**
     *
     * @var string[]
     */
    protected $datesList = array(
        '2011-07-21 22:13:00',
        '2011-08-23 09:14:00',
        '2010-02-01 06:15:00',
        '2013-10-23 12:16:00',
        '2011-05-01 00:06:00',
        '2011-07-31 04:21:00',
        '2011-12-31 23:59:59',
        '2011-11-10 00:00:00',
    );

    public function testConstruct() {
        try {
            new CronExpression('*');
            $this->fail('The expected exception has not been raised.');
        } catch (\InvalidArgumentException $expected) {}
        try {
            new CronExpression('a b c d e');
            $this->fail('The expected exception has not been raised.');
        } catch (\InvalidArgumentException $expected) {}
        try {
            new CronExpression('@nopredef');
            $this->fail('The expected exception has not been raised.');
        } catch (\InvalidArgumentException $expected) {}
    }

    /**
     * @dataProvider providerCheckData
     */
    public function testCheckDate($expression, $in, $out) {
        $cron = new CronExpression($expression);
        $this->assertEquals(
            $out, $cron->checkDate(new \DateTime($in))
        );
    }

    public function providerCheckData() {
        $result = array(
            0 => array(true, true, true, true, true, true, true, true),
            3 => array(false, true, false, true, true, false, false, true),
            4 => array(false, false, true, false, true, true, false, true),
            5 => array(false, false, false, false, true, true, false, false),
            6 => array(false, true, true, false, false, false, false, false),
            7 => array(true, false, false, true, false, false, false, false),
            8 => array(false, false, false, false, false, false, false, false),
            9 => array(false, false, false, false, false, true, false, false),
            11 => array(false, false, false, false, false, false, false, true)
        );
        $result[1] = $result[0];
        $result[2] = $result[0];
        $result[10] = $result[9];
        $result[12] = $result[11];
        $ret = array();
        foreach ($this->expressions as $exprID => $expression) {
            foreach ($this->datesList as $dateID => $date) {
                $ret[$expression . ': ' . $date . ': ' . $result[$exprID][$dateID]] = array(
                    $expression,
                    $date,
                    $result[$exprID][$dateID]
                );
            }
        }
        return $ret;
    }

    /**
     * @dataProvider providerGetNextDate
     */
    public function testGetNextDate($expression, $in, $out) {
        $cron = new CronExpression($expression);
        $this->assertEquals(
            new \DateTime($out), $cron->getNextDate(new \DateTime($in))
        );
    }

    public function providerGetNextDate() {
        $result = array(
            0 => array(
                '2011-07-21 22:14:00',
                '2011-08-23 09:15:00',
                '2010-02-01 06:16:00',
                '2013-10-23 12:17:00',
                '2011-05-01 00:07:00',
                '2011-07-31 04:22:00',
                '2012-01-01 00:00:00',
                '2011-11-10 00:01:00',
            ),
            3 => array(
                '2011-07-21 22:14:00',
                '2011-08-23 09:16:00',
                '2010-02-01 06:16:00',
                '2013-10-23 12:18:00',
                '2011-05-01 00:08:00',
                '2011-07-31 04:22:00',
                '2012-01-01 00:00:00',
                '2011-11-10 00:02:00',
            ),
            4 => array(
                '2011-07-21 22:15:00',
                '2011-08-23 09:15:00',
                '2010-02-01 06:18:00',
                '2013-10-23 12:18:00',
                '2011-05-01 00:09:00',
                '2011-07-31 04:24:00',
                '2012-01-01 00:00:00',
                '2011-11-10 00:03:00',
            ),
            5 => array(
                '2011-07-31 00:00:00',
                '2011-09-11 00:00:00',
                '2010-02-21 00:00:00',
                '2013-12-01 00:00:00',
                '2011-05-01 00:09:00',
                '2011-07-31 04:24:00',
                '2012-01-01 00:00:00',
                '2011-12-11 00:00:00',
            ),
            6 => array(
                '2011-07-22 06:10:00',
                '2011-08-23 09:15:00',
                '2010-02-01 07:10:00',
                '2013-10-24 06:10:00',
                '2011-05-01 06:10:00',
                '2011-07-31 06:10:00',
                '2012-01-01 06:10:00',
                '2011-11-10 06:10:00',
            ),
            7 => array(
                '2011-07-21 22:16:00',
                '2011-08-23 12:13:00',
                '2010-02-01 12:13:00',
                '2013-10-23 12:19:00',
                '2011-05-01 12:13:00',
                '2011-07-31 12:13:00',
                '2012-01-01 12:13:00',
                '2011-11-10 12:13:00',
            ),
            8 => array(
                '2011-07-22 00:01:00',
                '2012-07-01 00:01:00',
                '2010-07-01 00:01:00',
                '2014-07-01 00:01:00',
                '2011-07-01 00:01:00',
                '2011-07-31 05:01:00',
                '2012-07-01 00:01:00',
                '2012-07-01 00:01:00',
            ),
            9 => array(
                '2011-07-23 00:12:00',
                '2011-08-23 10:12:00',
                '2010-02-02 00:12:00',
                '2013-10-24 00:12:00',
                '2011-05-01 00:12:00',
                '2011-07-31 04:24:00',
                '2012-01-01 00:12:00',
                '2011-11-10 00:12:00',
            ),
            11 => array(
                '2011-09-01 00:00:00',
                '2011-09-01 00:00:00',
                '2010-03-01 00:00:00',
                '2013-11-01 00:00:00',
                '2011-05-04 00:00:00',
                '2011-09-01 00:00:00',
                '2012-03-01 00:00:00',
                '2011-11-13 00:00:00',
            )
        );
        $result[1] = $result[0];
        $result[2] = $result[0];
        $result[10] = $result[9];
        $result[12] = $result[11];
        $ret = array();
        foreach ($this->expressions as $exprID => $expression) {
            foreach ($this->datesList as $dateID => $date) {
                $ret[$expression . ': ' . $date . ': ' . $result[$exprID][$dateID]] = array(
                    $expression,
                    $date,
                    $result[$exprID][$dateID]
                );
            }
        }
        return $ret;
    }

    public function testGetNextDateWithNullArg() {
        $dateIn = new \DateTime();
        $cron = new CronExpression($this->expressions[0]);
        $dateOut = $cron->getNextDate();
        $this->assertInstanceOf('DateTime', $dateOut);
        $interval = $dateOut->diff($dateIn);
        $this->assertEquals(1, $interval->invert);
    }

    /**
     * @dataProvider providerPredefinedExpression
     */
    public function testPredefinedExpression($expression, $in, $out) {
        $tmp = new CronExpression($expression);
        $this->assertEquals(
            $out, $tmp->checkDate(new \DateTime($in))
        );
    }

    protected function checkNextDate($cases) {
        foreach ($cases as $case) {
            $tmp = new CronExpression($case['expression']);
            $this->assertEquals(new \DateTime($case['out']), $tmp->getNextDate(\DateTime($case['in'])));
        }
    }

    public function providerPredefinedExpression() {

        function yearly($in, $out = true) {
            return array('expression' => '@yearly', 'in' => $in, 'out' => $out,);
        }

        function annually($in, $out = true) {
            return array('expression' => '@annually', 'in' => $in, 'out' => $out,);
        }

        function monthly($in, $out = true) {
            return array('expression' => '@monthly', 'in' => $in, 'out' => $out,);
        }

        function weekly($in, $out = true) {
            return array('expression' => '@weekly', 'in' => $in, 'out' => $out,);
        }

        function daily($in, $out = true) {
            return array('expression' => '@daily', 'in' => $in, 'out' => $out,);
        }

        function hourly($in, $out = true) {
            return array('expression' => '@hourly', 'in' => $in, 'out' => $out,);
        }

        return array(
            yearly('2012-01-01 00:00:30'),
            yearly('2013-01-01 00:00:40'),
            yearly('2016-01-01 00:00:50'),
            yearly('2020-01-01 00:00:55'),
            yearly('2012-01-01 00:01:00', false),
            yearly('2018-02-01 00:00:00', false),
            yearly('2021-01-01 10:00:00', false),
            yearly('2010-01-01 00:10:00', false),
            annually('2012-01-01 00:00:50'),
            annually('2018-01-01 00:00:06'),
            annually('2021-01-01 00:00:07'),
            annually('2010-01-01 00:00:08'),
            annually('2012-01-01 00:01:00', false),
            annually('2018-02-01 00:00:00', false),
            annually('2021-01-01 10:00:00', false),
            annually('2010-01-01 00:10:00', false),
            monthly('2012-07-01 00:00:00'),
            monthly('2014-08-01 00:00:00'),
            monthly('2010-10-01 00:00:00'),
            monthly('2015-02-01 00:00:00'),
            monthly('2012-07-01 10:00:00', false),
            monthly('2014-08-01 00:10:00', false),
            monthly('2010-10-13 00:00:10', false),
            monthly('2015-02-01 16:00:00', false),
            weekly('2011-07-31 00:00:00'),
            weekly('2011-08-21 00:00:00'),
            weekly('2011-09-18 00:00:00'),
            weekly('2011-10-30 00:00:00'),
            weekly('2012-07-20 00:00:00', false),
            weekly('2012-08-30 00:00:00', false),
            weekly('2012-09-18 10:00:00', false),
            weekly('2012-10-30 00:11:00', false),
            daily('2012-07-15 00:00:10'),
            daily('2030-08-12 00:00:20'),
            daily('2012-01-30 00:00:30'),
            daily('2015-09-15 00:00:40'),
            daily('2012-07-15 01:00:00', false),
            daily('2030-08-12 00:10:00', false),
            daily('2015-09-15 23:59:59', false),
            daily('2011-12-31 23:59:59', false),
            hourly('2015-09-15 01:00:00'),
            hourly('2015-01-21 12:00:00'),
            hourly('2015-11-20 22:00:00'),
            hourly('2015-06-24 17:00:00'),
            hourly('2015-09-15 01:10:00', false),
            hourly('2015-01-21 12:20:00', false),
            hourly('2015-11-20 22:30:00', false),
            hourly('2011-12-31 23:59:59', false),
        );
    }

}