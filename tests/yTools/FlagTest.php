<?php

namespace yTools;

/**
 * Test class for Flag.
 * Generated by PHPUnit on 2011-11-20 at 18:08:13.
 */
class FlagTest extends \PHPUnit_Framework_TestCase
{

    public $tmpDirectory = 'FlagTest';

    public function __construct($name = NULL, array $data = array(), $dataName = '')
    {
        parent::__construct($name, $data, $dataName);
        $this->tmpDirectory =
            \TestConfiguration::getInstance()->getTemporaryDirectory() .
            '/' . $this->tmpDirectory;
    }

    protected function setUp()
    {
        if (file_exists($this->tmpDirectory)) {
            \TestHelper::remove($this->tmpDirectory);
        }
        mkdir($this->tmpDirectory, 0770, true);
    }

    protected function tearDown()
    {
        if (file_exists($this->tmpDirectory)) {
            \TestHelper::remove($this->tmpDirectory);
        }
    }

    public function testConstructorDefault()
    {
        $flag = new Flag($this->tmpDirectory);
        $this->assertEquals($this->tmpDirectory, $flag->getFlagDirectory());
        $this->assertEquals(Flag::RUN_ONE_IN_THE_DAY, $flag->getType());
        $this->assertEquals(0, $flag->getPeriod());
    }

    public function testConstructorUnexistsDir()
    {
        $path = $this->tmpDirectory . '/UnexistsDir';
        $message = null;
        try {
            new Flag($path);
        } catch (\InvalidArgumentException $e) {
            $message = $e->getMessage();
        }
        $this->assertEquals('Given path does not exists or is not a directory. ' . $path, $message);
    }

    public function testConstructorUnwritableDir()
    {
        $path = $this->tmpDirectory . '/UnwritableDir';
        mkdir($path, 0444);
        $message = null;
        try {
            new Flag($path);
        } catch (\InvalidArgumentException $e) {
            $message = $e->getMessage();
        }
        $this->assertEquals('In given path could not write a file.', $message);
    }

    public function providerConstructTypeWithPeriod()
    {
        return array(
            array(Flag::RUN_DAY_PERIOD, 1),
            array(Flag::RUN_DAY_PERIOD, 2),
            array(Flag::RUN_DAY_PERIOD, 4),
            array(Flag::RUN_DAY_PERIOD, 23),
            array(Flag::RUN_DAY_PERIOD, 56),
            array(Flag::RUN_HOUR_PERIOD, 1),
            array(Flag::RUN_HOUR_PERIOD, 2),
            array(Flag::RUN_HOUR_PERIOD, 4),
            array(Flag::RUN_HOUR_PERIOD, 23),
            array(Flag::RUN_HOUR_PERIOD, 56),
            array(Flag::RUN_MINUTE_PERIOD, 1),
            array(Flag::RUN_MINUTE_PERIOD, 2),
            array(Flag::RUN_MINUTE_PERIOD, 4),
            array(Flag::RUN_MINUTE_PERIOD, 23),
            array(Flag::RUN_MINUTE_PERIOD, 56),
            array(Flag::RUN_SECOND_PERIOD, 1),
            array(Flag::RUN_SECOND_PERIOD, 2),
            array(Flag::RUN_SECOND_PERIOD, 4),
            array(Flag::RUN_SECOND_PERIOD, 23),
            array(Flag::RUN_SECOND_PERIOD, 56),
        );
    }

    /**
     * @dataProvider providerConstructTypeWithPeriod
     */
    public function testConstructTypeWithPeriod($type, $period)
    {
        $flag = new Flag($this->tmpDirectory, $type, $period);
        $this->assertEquals($type, $flag->getType());
        $this->assertEquals($period, $flag->getPeriod());
    }

    public function providerConstructTypeWithPeriodError()
    {
        return array(
            array(Flag::RUN_DAY_PERIOD),
            array(Flag::RUN_HOUR_PERIOD),
            array(Flag::RUN_MINUTE_PERIOD),
            array(Flag::RUN_SECOND_PERIOD),
            array('unexists'),
        );
    }

    /**
     * @dataProvider providerConstructTypeWithPeriodError
     */
    public function testConstructTypeWithPeriodError($type)
    {
        try {
            $flag = new Flag($this->tmpDirectory, $type, 0);
        } catch (\Exception $e) {
            $message = $e->getMessage();
        }
        $this->assertEquals('Unknown flag type or wrong periond value', $message);
        try {
            $flag = new Flag($this->tmpDirectory, $type, -10);
        } catch (\Exception $e) {
            $message = $e->getMessage();
        }
        $this->assertEquals('Unknown flag type or wrong periond value', $message);
    }

    public function testConstructTypeWithoutPeriod()
    {
        $flag = new Flag($this->tmpDirectory, Flag::RUN_ONE_IN_THE_DAY, 12);
        $this->assertEquals(Flag::RUN_ONE_IN_THE_DAY, $flag->getType());
        $this->assertEquals(0, $flag->getPeriod());
        $flag = new Flag($this->tmpDirectory, Flag::RUN_ONE_IN_THE_DAY, -12);
        $this->assertEquals(Flag::RUN_ONE_IN_THE_DAY, $flag->getType());
        $this->assertEquals(0, $flag->getPeriod());
    }

    public function testFlagPrefixDefault()
    {
        $flag = new Flag($this->tmpDirectory);
        $flag->run(function() {
                
            });
        $isExists = file_exists($this->tmpDirectory . '/ProcessFlag.flag');
        $this->assertTrue($isExists);
        $this->assertEquals('ProcessFlag', $flag->getFlagPrefix());
    }

    public function providerFlagPrefix()
    {
        return array(
            array('TestPrefix1', 'TestPrefix1'),
            array('illegal%$chars$%$abc___', 'illegal_chars_abc_'),
        );
    }

    /**
     * @dataProvider providerFlagPrefix
     */
    public function testFlagPrefix($input, $expected)
    {
        $flag = new Flag($this->tmpDirectory);
        $flag->setFlagPrefix($input);
        $this->checkFlagFalse($flag, $this->tmpDirectory, $expected);
        $flag->run(function() {});
        $this->checkFlagTrue($flag, $this->tmpDirectory, $expected);
    }

    public function testFlagReleaseDefault()
    {
        $flag = new Flag($this->tmpDirectory);
        $this->checkFlagFalse($flag, $this->tmpDirectory);
        $that = $this;
        $flag->run(function() use ($that, $flag) {
            $that->checkFlagTrue($flag, $that->tmpDirectory);
        });
        $this->checkFlagTrue($flag, $this->tmpDirectory);
        $this->assertEquals(Flag::RELEASE_BEFORE_RUN_FUNC, $flag->getFlagRelease());
    }

    public function testFlagReleaseAfter()
    {
        $flag = new Flag($this->tmpDirectory);
        $flag->setFlagRelease(Flag::RELEASE_AFTER_RUN_FUNC);
        $this->checkFlagFalse($flag, $this->tmpDirectory);
        $that = $this;
        $flag->run(function() use ($that, $flag) {
            $that->checkFlagFalse($flag, $that->tmpDirectory);
        });
        $this->checkFlagTrue($flag, $this->tmpDirectory);
        $this->assertEquals(Flag::RELEASE_AFTER_RUN_FUNC, $flag->getFlagRelease());
    }

    public function testFlagReleaseBefore()
    {
        $flag = new Flag($this->tmpDirectory);
        $flag->setFlagRelease(Flag::RELEASE_BEFORE_RUN_FUNC);
        $this->checkFlagFalse($flag, $this->tmpDirectory);
        $that = $this;
        $flag->run(function() use ($that, $flag) {
            $that->checkFlagTrue($flag, $that->tmpDirectory);
        });
        $this->checkFlagTrue($flag, $this->tmpDirectory);
        $this->assertEquals(Flag::RELEASE_BEFORE_RUN_FUNC, $flag->getFlagRelease());
    }

    public function testFlagReleaseError()
    {
        $flag = new Flag($this->tmpDirectory);
        try {
            $flag->setFlagRelease('xyz');
        } catch (\Exception $e) {
            $message = $e->getMessage();
        }
        $this->assertEquals('Unknown release type (find correct in class constant)', $message);
        $this->assertEquals(Flag::RELEASE_BEFORE_RUN_FUNC, $flag->getFlagRelease());
    }

    public function testRemoveFlag()
    {
        $flag = new Flag($this->tmpDirectory);
        $this->checkFlagFalse($flag, $this->tmpDirectory);
        $flag->run(function() {});
        $this->checkFlagTrue($flag, $this->tmpDirectory);
        $flag->removeFlag();
        $this->checkFlagFalse($flag, $this->tmpDirectory);
    }

    public function testRemoveUnexistsFlag()
    {
        $flag = new Flag($this->tmpDirectory);
        $this->checkFlagFalse($flag, $this->tmpDirectory);
        $flag->removeFlag();
        $this->checkFlagFalse($flag, $this->tmpDirectory);
    }
    
    function providerRunTooEarly()
    {
        return array(
            array(Flag::RUN_SECOND_PERIOD, 60),
            array(Flag::RUN_MINUTE_PERIOD, 60),
            array(Flag::RUN_HOUR_PERIOD, 60),
            array(Flag::RUN_DAY_PERIOD, 60),
            array(Flag::RUN_ONE_IN_THE_DAY, 0),
        );
    }
    
    /**
     * @dataProvider providerRunTooEarly
     */
    public function testRunTooEarly($type, $period)
    {
        mkdir($dir = $this->tmpDirectory . '/run');
        $flag = new Flag($dir, $type, $period);
        $function = function() {};
        $this->checkFlagFalse($flag, $dir);
        $flag->run($function);
        $this->checkFlagTrue($flag, $dir);
        try {
            $flag->run($function);
        } catch (\Exception $e) {
            $message = $e->getMessage();
        }
        $this->checkFlagTrue($flag, $dir);
        $this->assertEquals('Too early to run the given function', $message);
    }
    
    public function testRunDirError()
    {
        mkdir($dir = $this->tmpDirectory . '/run');
        $flag = new Flag($dir, Flag::RUN_SECOND_PERIOD, 60);
        rmdir($dir);
        try {
            $flag->run(function() {});
        } catch (\Exception $e) {
            $message = $e->getMessage();
        }
        $this->assertStringStartsWith('Can not create flag at ' . $dir, $message);
    }
    
    public function testRunNotFunction()
    {
        mkdir($dir = $this->tmpDirectory . '/run');
        $flag = new Flag($dir, Flag::RUN_SECOND_PERIOD, 60);
        try {
            $flag->run('not function');
        } catch (\Exception $e) {
            $message = $e->getMessage();
        }
        $this->assertEquals('The given function is not callable.', $message);
    }

    public function checkFlagTrue($flag, $dir, $prefix = 'ProcessFlag')
    {
        $isExists = file_exists($dir . '/' . $prefix . '.flag');
        $this->assertTrue($isExists);
        $this->assertEquals($prefix, $flag->getFlagPrefix());
    }

    public function checkFlagFalse($flag, $dir, $prefix = 'ProcessFlag')
    {
        $isExists = file_exists($dir . '/' . $prefix . '.flag');
        $this->assertFalse($isExists);
        $this->assertEquals($prefix, $flag->getFlagPrefix());
    }

}